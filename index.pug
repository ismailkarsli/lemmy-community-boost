doctype html
html(lang="en")
	head
		meta(charset="UTF-8")
		meta(name="viewport", content="width=device-width, initial-scale=1.0")
		title Lemmy Community Boost (LCB)
	body
		#main
			article
				h1 Lemmy Community Boost
				p LCB is a tool to "seed" new communities in the Lemmyverse.
				h4 The purpose
				p Communities in Lemmy are only federated if users from remote instances subscribes. This means that new communities are not visible to remote instance users. This tool aims to solve this problem.
				h4 Why 
				p I think mods (including me) wouldn't want to put effort into a new community if it doesn't get any interaction, so I think it would be nice to at least start with it appearing in the "All" tab.
				h4 How it works
				p LCB automatically subscribes to communities from remote instances <b>until a normal user subscribes</b>. Then it will unsubscribe to not manipulate the community's subscriber count.
				p LCB will not subscribe to instances/communities that are:
				ul
					li Not guaranteed on Fediseer
					li Has 3 or more censures on Fediseer
					li NSFW flagged
					if blacklist && blacklist.length
						li Blacklisted manually (#{blacklist.join(", ")})
			if announcement
				div#announcement= announcement
			form#input(action="/", method="post") 
				fieldset
					input(type="text", name="community", placeholder="technology@lemmy.world...")
					input(type="submit", value="Add")
			div#status(style="display: none")
			span#loading(style='display: none')
				svg(width='16' height='16' viewbox='0 0 24 24' xmlns='http://www.w3.org/2000/svg')
					style.
						.spinner_P7sC{transform-origin:center;animation:spinner_svv2 .75s infinite linear}@keyframes spinner_svv2{100%{transform:rotate(360deg)}}
					path.spinner_P7sC(d='M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z')
			if communities
				h2 Communities
				.table-responsive
					table#communities
						thead
							tr
								th(scope="col") Community name
								th(scope="col") Instance
								th(scope="col") Status
								th(scope="col") Last updated
								th(scope="col") Added
						tbody
							each com in communities
								tr(data-name=com.name, data-host=com.host)
									td(data-label="Community name" scope="row")
										a(href=`https://lemmyverse.link/c/${com.name}@${com.host}` target="_blank")= com.name
									td(data-label="Instance")= com.host
									td(data-label="Status" title=com.progress.map(p => (p.status === "done" ? "✅ " : p.status === "pending" ? "⏳ " : "❌ ")+ p.host).join("\n"))
										if com.progress.filter(p => p.status === "done").length == com.progress.length
											span= "✅"
										else
											if com.progress.filter(p => p.status === "done").length
												span= " ✅ " + com.progress.filter(p => p.status === "done").length
											if com.progress.filter(p => p.status === "pending").length
												span= " ⏳ " + com.progress.filter(p => p.status === "pending").length
											if com.progress.filter(p => p.status === "error").length
												span= " ❌ " + com.progress.filter(p => p.status === "error").length
									if com.updatedAt
										td(data-label="Last updated" data-date=com.updatedAt)= com.updatedAt.toLocaleDateString()
									else
										td(data-label="Last updated")= "Never"
									td(data-label="Added" data-date=com.createdAt)= com.createdAt.toLocaleDateString()
				div(style="margin-top: 12px; text-align: right;")
					p Total of #{stats.total} communities (#{stats.total - stats.inProgress} completed, #{stats.inProgress} in progress)

				div(style="margin-top: 12px;")
					div ✅ = Community has a normal user subscription, LCB unsubscribed
					div ⏳ = LCB subscribed to the community and waiting for a normal user subscription
					div ❌ = LCB failed to subscribe to the community
			if instances 
				h2 Instances/Users
				table#instances 
					thead
						tr
							th(scope="col") Instance
							th(scope="col") Username
							th(scope="col") Active
					tbody
						each inst in instances
							tr
								td(data-label="Instance" scope="row")
									a(href=`https://${inst.host}/` target="_blank")=inst.host
								td(data-label="Username")= inst.username
								td(data-label="Active")= inst.active ? "✅" : "❌"
						else 
							tr
								td No instances yet
		footer
			div LCB checks instance subscribe status every #{Math.floor(interval)} minutes and uses "lcb-bot/1.0.0" user-agent for requests.
			div If you are an instance admin, the instances and users used are listed above. If you want to add or remove a user from this tool, you can contact me.
			div LCB is open source and you can find the disgusting source code <a href="https://github.com/ismailkarsli/lemmy-community-boost" target="_blank">here</a>.
			div Contact me from lemmy: <a href="https://lemy.lol/u/iso">@iso@lemy.lol</a> or email: iso{at}lemy.lol

		script.
			const date = document.querySelectorAll("td[data-date]")
			date.forEach(d => {
				const diff = Math.round((new Date(d.dataset.date) - new Date()) / 1000);
				if(Math.abs(diff) < 60)
					d.innerText = new Intl.RelativeTimeFormat('en', { numeric: 'auto' }).format(diff, 'second')
				else if(Math.abs(diff) < 60 * 60)
					d.innerText = new Intl.RelativeTimeFormat('en', { numeric: 'auto' }).format(Math.round(diff / 60), 'minute')
				else if(Math.abs(diff) < 60 * 60 * 24)
					d.innerText = new Intl.RelativeTimeFormat('en', { numeric: 'auto' }).format(Math.round(diff / 60 / 60), 'hour')
				else if(Math.abs(diff) < 60 * 60 * 24 * 7)
					d.innerText = new Intl.RelativeTimeFormat('en', { numeric: 'auto' }).format(Math.round(diff / 60 / 60 / 24), 'day')
				else if(Math.abs(diff) < 60 * 60 * 24 * 30)
					d.innerText = new Intl.RelativeTimeFormat('en', { numeric: 'auto' }).format(Math.round(diff / 60 / 60 / 24 / 7), 'week')
				else if(Math.abs(diff) < 60 * 60 * 24 * 365)
					d.innerText = new Intl.RelativeTimeFormat('en', { numeric: 'auto' }).format(Math.round(diff / 60 / 60 / 24 / 30), 'month')
				else 
					d.innerText = new Intl.RelativeTimeFormat('en', { numeric: 'auto' }).format(Math.round(diff / 60 / 60 / 24 / 365), 'year')
				
			})
		script(type="module").
			const form = document.querySelector("form#input")
			form.addEventListener("submit", async (e) => {
				e.preventDefault()
				const loading = document.querySelector("#loading")
				removeStatus()
				try {
					if (loading) loading.style.display = "flex"
					form.childNodes.forEach(n => n.disabled = true)
					const input = form.querySelector("input[type=text]")
					if(!input.value) {
						return addStatus(false, "Please enter a community name")
					}
					const response = await fetch("/", {
						method: "POST",
						headers: {
							"Content-Type": "application/json"
						},
						body: JSON.stringify({community: input.value})
					}).then(r => r.json())
					addStatus(response.success, response.message)
					if(response.success) {
						input.value = ""
						// delete old list item
						const oldItem = document.querySelector(`#communities tr[data-name="${response.community.name}"][data-host="${response.community.host}"]`)
						if(oldItem) oldItem.remove()
						// add new list item
						const table = document.querySelector("table#communities tbody")
						const row = document.createElement("tr")
						const name = document.createElement("td")
						name.innerText = response.community.name
						const host = document.createElement("td")
						host.innerText = response.community.host
						const status = document.createElement("td")
						status.title = "Done/Pending/Failed"
						status.innerText = "⏳"
						const updatedAt = document.createElement("td")
						updatedAt.innerText = "Never"
						const createdAt = document.createElement("td")
						createdAt.innerText = "Just now"
						

						row.append(name, host, status, updatedAt, createdAt)
						table.prepend(row)
					}
				} catch(e) {
					console.error(e)
					addStatus(false, "Something went wrong")
				} finally {
					if (loading) loading.style.display = "none"
					form.childNodes.forEach(n => n.disabled = false)
				}
			})
			function addStatus(success, message) {
				const status = document.querySelector("div#status")
				status.innerText = message
				status.style.display = "block"
				if(success) {
					status.style.color = "green"
				} else {
					status.style.color = "red"
				}
			}
			function removeStatus() {
				const status = document.querySelector("div#status")
				status.style.display = "none"
			}
	style.
		body {
			font-family: sans-serif;
		}
		a {
			color: #4CAF50;
		}
		h4 {
			margin: 12px 0;
		}
		#main {
			max-width: 800px;
			margin: 0 auto;
			padding: 20px;
		}
		fieldset {
			display: flex;
			border: none;
			margin: 0;
			padding: 0;
		}
		form input {
			width: 100%;
			padding: 10px;
			margin: 4px 0;
			border: 1px solid #ccc;
			outline: none;
			border-radius: 0;
			box-sizing: border-box;
		}
		form input[type=submit] {
			width: auto;
			background-color: #4CAF50;
			color: white;
			border: none;
			cursor: pointer;
			min-width: 100px;
		}
		form input[type=submit]:hover {
			background-color: #45a049;
		}
		form input[type=submit]:disabled {
			background-color: #cccccc;
			cursor: not-allowed;
		}
		#status {
			margin: 0;
			padding: 0;
			text-align: center;
		}
		#loading {
			display: flex;
			justify-content: center;
		}
		#announcement {
			margin: 1rem 0;
			padding: 1rem;
			background-color: #f2f2f2;
			border-radius: 4px;
		}
		
		.table-responsive {
			max-width: 100%;
			max-height: 540px;
			overflow-x: auto;
			position: relative;
		}
		table {
			border-collapse: collapse;
			table-layout: fixed;
			margin: 0;
			padding: 0;
			width: 100%;
		}
		table thead th {
			position: sticky;
			top: 0;
		}
		th, td {
			text-align: left;
			padding: 8px;
		}
		tr:nth-child(even) {
			background-color: #f2f2f2;
		}
		tr:hover {
			background-color: #ddd;
		}
		th {
			background-color: #4CAF50;
			color: white;
		}
		@media screen and (max-width: 600px) {
			table {
				border: 0;
			}
			table thead {
				border: none;
				clip: rect(0 0 0 0);
				height: 1px;
				margin: -1px;
				overflow: hidden;
				padding: 0;
				position: absolute;
				width: 1px;
			}
			table tr {
				border-bottom: 3px solid #ddd;
				display: block;
				margin-bottom: .625em;
			}
			table td {
				border-bottom: 1px solid #ddd;
				display: block;
				font-size: .9em;
				text-align: right;
				background-color: #f2f2f2;
			}
			table td::before {
				content: attr(data-label);
				float: left;
			}
			table td:last-child {
				border-bottom: 0;
			}
		}
		
		footer {
			margin-top: 20px;
			font-size: 0.8rem;
			text-align: center;
		}
		footer div {
			margin-bottom: 5px;
		}

	